#!/bin/sh
#set -x
VONDA_VERSIONS="3.0\|2\|1"
script_dir=`dirname $0`
here=`pwd`
if test -f "$script_dir/logback.xml"; then
    silent="$silent -Dlogback.configurationFile=$script_dir/logback.xml "
else
    silent="-Dorg.slf4j.simpleLogger.defaultLogLevel=warn "
fi

java --version | grep -q ' 1[1-6]\.' && \
    silent="${silent}--illegal-access=permit "

silent="${silent}--add-modules=ALL-SYSTEM \
--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \
--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \
--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED "

if realpath . > /dev/null 2>&1 ; then
    :
else
    # does not exist on Mac OSX
    realpath() {
        target=$1

        cd `dirname $target`
        target=`basename $target`

        # Iterate down a (possible) chain of symlinks
        while [ -L "$target" ]
        do
            target=`readlink $target`
            cd `dirname $target`
            target=`basename $target`
        done

        # Compute the canonicalized name by finding the physical path
        # for the directory we're in and appending the target file.
        phys_dir=`pwd -P`
        echo "$phys_dir/$target"
    }
fi

if test -z "$jardir"; then
    script_dir=`realpath "$0"`
    script_dir=`dirname "$script_dir"`
    cd $script_dir
    cd ../compiler/target
    jardir=`pwd`
    cd $here
fi

JARIMAGE=`find $jardir -name vonda-\*-compiler.jar | grep "$VONDA_VERSIONS" | head -1`
if test -z "$JARIMAGE"; then
    echo "No executable image found"
    exit 1
fi
java $silent -cp "$JARIMAGE" de.dfki.mlt.rudimant.agent.nlp.EvalSrgs "$@"
