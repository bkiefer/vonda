// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: VondaLexer.flex

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2015  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */

package de.dfki.mlt.rudimant.compiler.io;

import static de.dfki.mlt.rudimant.common.ErrorInfo.ErrorType.*;

import java.util.*;

import de.dfki.mlt.rudimant.common.Location;
import de.dfki.mlt.rudimant.common.Position;
import de.dfki.mlt.rudimant.compiler.Mem;
import de.dfki.mlt.rudimant.compiler.Token;
import de.dfki.mlt.rudimant.compiler.tree.ExpLiteral;


@SuppressWarnings("fallthrough")
public class VondaLexer implements VondaGrammar.Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\11\1\13\1\14"+
    "\2\11\1\15\1\16\1\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\11\1\34\1\35\1\36\1\11\1\6\3\37"+
    "\1\40\1\41\1\42\5\12\1\43\13\12\1\44\2\12"+
    "\1\11\1\45\2\11\1\46\1\6\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\12\1\55\1\56\1\12\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\12\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\44\2\12\1\11\1\73"+
    "\2\11\6\0\1\74\32\0\2\6\4\12\4\6\1\12"+
    "\2\6\1\0\7\6\1\12\4\6\1\12\5\6\27\12"+
    "\1\6\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12"+
    "\7\6\1\12\1\6\1\12\21\6\160\0\5\12\1\6"+
    "\2\12\2\6\4\12\1\6\1\12\6\6\1\12\1\6"+
    "\3\12\1\6\1\12\1\6\24\12\1\6\123\12\1\6"+
    "\213\12\1\6\5\0\2\6\246\12\1\6\46\12\2\6"+
    "\1\12\6\6\51\12\6\6\1\12\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\12\4\6\4\12\15\6\6\0\5\6\1\12\4\6"+
    "\13\0\1\6\1\0\3\6\53\12\37\0\4\6\2\12"+
    "\1\0\143\12\1\6\1\12\10\0\1\6\6\0\2\12"+
    "\2\0\1\6\4\0\2\12\12\0\3\12\2\6\1\12"+
    "\17\6\1\0\1\12\1\0\36\12\33\0\2\6\131\12"+
    "\13\0\1\12\16\6\12\0\41\12\11\0\2\12\4\6"+
    "\1\12\2\6\1\0\30\12\4\0\1\12\11\0\1\12"+
    "\3\0\1\12\5\0\22\6\31\12\3\0\4\6\13\12"+
    "\65\6\25\12\1\6\22\12\13\6\61\0\66\12\3\0"+
    "\1\12\22\0\1\12\7\0\12\12\2\0\2\6\12\0"+
    "\1\6\20\12\3\0\1\6\10\12\2\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\1\12\3\6\4\12\2\6"+
    "\1\0\1\12\7\0\2\6\2\0\2\6\3\0\1\12"+
    "\10\6\1\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\4\12\7\6\2\12\1\6\1\0\2\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\7\6"+
    "\1\12\6\0\1\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\7\6\3\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\1\6\1\12\20\6\1\0\1\12\1\6\6\12"+
    "\3\6\3\12\1\6\4\12\3\6\2\12\1\6\1\12"+
    "\1\6\2\12\3\6\2\12\3\6\3\12\3\6\14\12"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\12"+
    "\6\6\1\0\16\6\12\0\11\6\1\12\6\6\5\0"+
    "\10\12\1\6\3\12\1\6\27\12\1\6\20\12\3\6"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\3\12\5\6\2\12\2\0\2\6\12\0\20\6"+
    "\1\12\3\0\1\6\10\12\1\6\3\12\1\6\27\12"+
    "\1\6\12\12\1\6\5\12\2\6\1\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\7\6\1\12"+
    "\1\6\2\12\2\0\2\6\12\0\1\6\2\12\15\6"+
    "\4\0\11\12\1\6\3\12\1\6\51\12\2\0\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\1\12\5\6\3\12"+
    "\1\0\7\6\3\12\2\0\2\6\12\0\12\6\6\12"+
    "\1\6\3\0\1\6\22\12\3\6\30\12\1\6\11\12"+
    "\1\6\1\12\2\6\7\12\3\6\1\0\4\6\6\0"+
    "\1\6\1\0\1\6\10\0\6\6\12\0\2\6\2\0"+
    "\15\6\60\12\1\0\2\12\7\0\4\6\10\12\10\0"+
    "\1\6\12\0\47\6\2\12\1\6\1\12\1\6\5\12"+
    "\1\6\30\12\1\6\1\12\1\6\12\12\1\0\2\12"+
    "\11\0\1\12\2\6\5\12\1\6\1\12\1\6\6\0"+
    "\2\6\12\0\2\6\4\12\40\6\1\12\27\6\2\0"+
    "\6\6\12\0\13\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\2\0\10\12\1\6\44\12\4\6\24\0\1\6"+
    "\2\0\5\12\13\0\1\6\44\0\11\6\1\0\71\6"+
    "\53\12\24\0\1\12\12\0\6\6\6\12\4\0\4\12"+
    "\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12"+
    "\14\0\1\12\17\0\2\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\53\12\1\6\115\12\1\6\4\12\2\6"+
    "\7\12\1\6\1\12\1\6\4\12\2\6\51\12\1\6"+
    "\4\12\2\6\41\12\1\6\4\12\2\6\7\12\1\6"+
    "\1\12\1\6\4\12\2\6\17\12\1\6\71\12\1\6"+
    "\4\12\2\6\103\12\2\6\3\0\40\6\20\12\20\6"+
    "\126\12\2\6\6\12\3\6\u016c\12\2\6\21\12\1\6"+
    "\32\12\5\6\113\12\3\6\13\12\7\6\15\12\1\6"+
    "\4\12\3\0\13\6\22\12\3\0\13\6\22\12\2\0"+
    "\14\6\15\12\1\6\3\12\1\6\2\0\14\6\64\12"+
    "\40\0\3\6\1\12\3\6\2\12\1\0\2\6\12\0"+
    "\41\6\4\0\1\6\12\0\6\6\131\12\7\6\5\12"+
    "\2\0\42\12\1\0\1\12\5\6\106\12\12\6\37\12"+
    "\1\6\14\0\4\6\14\0\12\6\12\0\36\12\2\6"+
    "\5\12\13\6\54\12\4\6\32\12\6\6\12\0\46\6"+
    "\27\12\5\0\4\6\65\12\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\12\10\6\16\0\1\6"+
    "\2\0\77\6\5\0\57\12\21\0\7\12\4\6\12\0"+
    "\21\6\11\0\14\6\3\0\36\12\15\0\2\12\12\0"+
    "\54\12\16\0\14\6\44\12\24\0\10\6\12\0\3\6"+
    "\3\12\12\0\44\12\2\6\11\12\7\6\53\12\2\6"+
    "\3\12\20\6\3\0\1\6\25\0\4\12\1\0\6\12"+
    "\1\0\2\12\3\0\1\12\5\6\300\12\72\0\1\6"+
    "\5\0\26\12\2\6\6\12\2\6\46\12\2\6\6\12"+
    "\2\6\10\12\1\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\37\12\2\6\65\12\1\6\7\12\1\6\1\12"+
    "\3\6\3\12\1\6\7\12\3\6\4\12\2\6\6\12"+
    "\4\6\15\12\5\6\3\12\1\6\7\12\16\6\5\0"+
    "\30\6\2\3\5\0\20\6\2\12\23\6\1\12\13\6"+
    "\5\0\1\6\12\0\1\6\1\12\15\6\1\12\20\6"+
    "\15\12\3\6\40\12\20\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\12\4\6\1\12\2\6\12\12\1\6"+
    "\1\12\3\6\5\12\6\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\4\12\1\6\13\12\2\6\4\12\5\6"+
    "\5\12\4\6\1\12\21\6\51\12\u0177\6\57\12\1\6"+
    "\57\12\1\6\205\12\6\6\4\12\3\0\2\12\14\6"+
    "\46\12\1\6\1\12\5\6\1\12\2\6\70\12\7\6"+
    "\1\12\17\6\1\0\27\12\11\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\40\0\57\6\1\12"+
    "\325\6\3\12\31\6\11\12\6\0\1\6\5\12\2\6"+
    "\5\12\4\6\126\12\2\6\2\0\2\6\3\12\1\6"+
    "\132\12\1\6\4\12\5\6\53\12\1\6\136\12\21\6"+
    "\40\12\60\6\320\12\100\6\375\12\3\6\215\12\103\6"+
    "\56\12\2\6\15\12\3\6\20\12\12\0\2\12\24\6"+
    "\57\12\1\0\4\6\12\0\1\6\37\12\2\0\120\12"+
    "\2\0\45\6\11\12\2\6\147\12\2\6\65\12\2\6"+
    "\11\12\52\6\15\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\5\0\4\6\1\0\13\6\1\12\7\6\64\12"+
    "\14\6\2\0\62\12\22\0\12\6\12\0\6\6\22\0"+
    "\6\12\3\6\1\12\1\6\2\12\13\0\34\12\10\0"+
    "\2\6\27\12\15\0\14\6\35\12\3\6\4\0\57\12"+
    "\16\0\16\6\1\12\12\0\6\6\5\12\1\0\12\12"+
    "\12\0\5\12\1\6\51\12\16\0\11\6\3\12\1\0"+
    "\10\12\2\0\2\6\12\0\6\6\27\12\3\6\1\12"+
    "\3\0\62\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\6\3\12\2\6\13\12"+
    "\5\0\2\6\3\12\2\0\12\6\6\12\2\6\6\12"+
    "\2\6\6\12\11\6\7\12\1\6\7\12\1\6\53\12"+
    "\1\6\16\12\6\6\163\12\10\0\1\6\2\0\2\6"+
    "\12\0\6\6\244\12\14\6\27\12\4\6\61\12\4\6"+
    "\u0100\3\156\12\2\6\152\12\46\6\7\12\14\6\5\12"+
    "\5\6\1\12\1\0\12\12\1\6\15\12\1\6\5\12"+
    "\1\6\1\12\1\6\2\12\1\6\2\12\1\6\154\12"+
    "\41\6\153\12\22\6\100\12\2\6\66\12\50\6\15\12"+
    "\3\6\20\0\20\6\20\0\3\6\2\12\30\6\3\12"+
    "\31\6\1\12\6\6\5\12\1\6\207\12\2\6\1\0"+
    "\4\6\1\12\13\6\12\0\7\6\32\12\4\6\1\12"+
    "\1\6\32\12\13\6\131\12\3\6\6\12\2\6\6\12"+
    "\2\6\6\12\2\6\3\12\3\6\2\12\3\6\2\12"+
    "\22\6\3\0\4\6\14\12\1\6\32\12\1\6\23\12"+
    "\1\6\2\12\1\6\17\12\2\6\16\12\42\6\173\12"+
    "\105\6\65\12\210\6\1\0\202\6\35\12\3\6\61\12"+
    "\17\6\1\0\37\6\40\12\15\6\36\12\5\6\46\12"+
    "\5\0\5\6\36\12\2\6\44\12\4\6\10\12\1\6"+
    "\5\12\52\6\236\12\2\6\12\0\6\6\44\12\4\6"+
    "\44\12\4\6\50\12\10\6\64\12\234\6\67\12\11\6"+
    "\26\12\12\6\10\12\230\6\6\12\2\6\1\12\1\6"+
    "\54\12\1\6\2\12\3\6\1\12\2\6\27\12\12\6"+
    "\27\12\11\6\37\12\101\6\23\12\1\6\2\12\12\6"+
    "\26\12\12\6\32\12\106\6\70\12\6\6\2\12\100\6"+
    "\1\12\3\0\1\6\2\0\5\6\4\0\4\12\1\6"+
    "\3\12\1\6\35\12\2\6\3\0\4\6\1\0\40\6"+
    "\35\12\3\6\35\12\43\6\10\12\1\6\34\12\2\0"+
    "\31\6\66\12\12\6\26\12\12\6\23\12\15\6\22\12"+
    "\156\6\111\12\67\6\63\12\15\6\63\12\15\6\44\12"+
    "\4\0\10\6\12\0\u0146\6\52\12\1\6\2\0\3\6"+
    "\2\12\116\6\35\12\12\6\1\12\10\6\26\12\13\0"+
    "\137\6\25\12\33\6\27\12\11\6\3\0\65\12\17\0"+
    "\37\6\12\0\17\6\4\0\55\12\13\0\2\6\1\0"+
    "\17\6\1\0\2\6\31\12\7\6\12\0\6\6\3\0"+
    "\44\12\16\0\1\6\12\0\4\6\1\12\2\0\1\12"+
    "\10\6\43\12\1\0\2\6\1\12\11\6\3\0\60\12"+
    "\16\0\4\12\4\6\4\0\1\6\14\0\1\12\1\6"+
    "\1\12\43\6\22\12\1\6\31\12\14\0\6\6\1\0"+
    "\101\6\7\12\1\6\1\12\1\6\4\12\1\6\17\12"+
    "\1\6\12\12\7\6\57\12\14\0\5\6\12\0\6\6"+
    "\4\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\1\6\2\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\2\6\1\12\6\6"+
    "\1\0\5\6\5\12\2\0\2\6\7\0\3\6\5\0"+
    "\213\6\65\12\22\0\4\12\5\6\12\0\4\6\1\0"+
    "\3\12\36\6\60\12\24\0\2\12\1\6\1\12\10\6"+
    "\12\0\246\6\57\12\7\0\2\6\11\0\27\6\4\12"+
    "\2\0\42\6\60\12\21\0\3\6\1\12\13\6\12\0"+
    "\46\6\53\12\15\0\1\12\7\6\12\0\66\6\33\12"+
    "\2\6\17\0\4\6\12\0\306\6\54\12\17\0\145\6"+
    "\100\12\12\0\25\6\10\12\2\6\1\12\2\6\10\12"+
    "\1\6\2\12\1\6\30\12\6\0\1\6\2\0\2\6"+
    "\4\0\1\12\1\0\1\12\2\0\14\6\12\0\106\6"+
    "\10\12\2\6\47\12\7\0\2\6\7\0\1\12\1\6"+
    "\1\12\1\0\33\6\1\12\12\0\50\12\7\0\1\12"+
    "\4\0\10\6\1\0\10\6\1\12\13\0\56\12\20\0"+
    "\3\6\1\12\42\6\71\12\7\6\11\12\1\6\45\12"+
    "\10\0\1\6\10\0\1\12\17\6\12\0\30\6\36\12"+
    "\2\6\26\0\1\6\16\0\111\6\7\12\1\6\2\12"+
    "\1\6\46\12\6\0\3\6\1\0\1\6\2\0\1\6"+
    "\7\0\1\12\1\0\10\6\12\0\6\6\6\12\1\6"+
    "\2\12\1\6\40\12\5\0\1\6\2\0\1\6\5\0"+
    "\1\12\7\6\12\0\u0136\6\23\12\4\0\271\6\1\12"+
    "\54\6\4\12\37\6\232\12\146\6\157\12\21\6\304\12"+
    "\274\6\57\12\1\6\11\0\307\6\107\12\271\6\71\12"+
    "\7\6\37\12\1\6\12\0\146\6\36\12\2\6\5\0"+
    "\13\6\60\12\7\0\11\6\4\12\14\6\12\0\11\6"+
    "\25\12\5\6\23\12\260\6\100\12\200\6\113\12\4\6"+
    "\1\0\1\12\67\0\7\6\4\0\15\12\100\6\2\12"+
    "\1\6\1\12\1\0\13\6\2\0\16\6\370\12\10\6"+
    "\326\12\52\6\11\12\367\6\37\12\61\6\3\12\21\6"+
    "\4\12\10\6\u018c\12\4\6\153\12\5\6\15\12\3\6"+
    "\11\12\7\6\12\12\3\6\2\0\1\6\4\0\301\6"+
    "\5\0\3\6\26\0\2\6\7\0\36\6\4\0\224\6"+
    "\3\0\273\6\125\12\1\6\107\12\1\6\2\12\2\6"+
    "\1\12\2\6\2\12\2\6\4\12\1\6\14\12\1\6"+
    "\1\12\1\6\7\12\1\6\101\12\1\6\4\12\2\6"+
    "\10\12\1\6\7\12\1\6\34\12\1\6\4\12\1\6"+
    "\5\12\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6"+
    "\31\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\10\12\2\6\151\0\4\6"+
    "\62\0\10\6\1\0\16\6\1\0\26\6\5\0\1\6"+
    "\17\0\120\6\7\0\1\6\21\0\2\6\7\0\1\6"+
    "\2\0\1\6\5\0\325\6\55\12\3\6\7\0\7\12"+
    "\2\6\12\0\4\6\1\12\u0171\6\54\12\16\0\5\6"+
    "\306\12\13\6\7\0\51\6\104\12\7\0\1\12\4\6"+
    "\12\0\u0156\6\1\12\117\6\4\12\1\6\33\12\1\6"+
    "\2\12\1\6\1\12\2\6\1\12\1\6\12\12\1\6"+
    "\4\12\1\6\1\12\1\6\1\12\6\6\1\12\4\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\3\12\1\6"+
    "\2\12\1\6\1\12\2\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\2\12\1\6"+
    "\1\12\2\6\4\12\1\6\7\12\1\6\4\12\1\6"+
    "\4\12\1\6\1\12\1\6\12\12\1\6\21\12\5\6"+
    "\3\12\1\6\5\12\1\6\21\12\u0134\6\12\0\6\6"+
    "\336\12\42\6\65\12\13\6\336\12\2\6\u0182\12\16\6"+
    "\u0131\12\37\6\36\12\342\6\113\12\266\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\3\1\5\1\3"+
    "\1\6\4\3\2\7\3\3\15\5\1\3\1\10\2\11"+
    "\1\12\2\1\2\13\1\1\1\14\1\15\1\16\1\17"+
    "\1\20\1\0\1\21\1\0\1\22\1\0\1\2\4\7"+
    "\2\22\1\0\1\23\1\24\1\0\1\25\1\26\1\27"+
    "\4\5\1\30\4\5\1\31\16\5\1\32\1\33\3\10"+
    "\1\34\3\33\1\0\1\35\1\0\2\7\1\0\1\22"+
    "\2\7\10\5\1\36\2\5\1\37\1\5\1\40\12\5"+
    "\3\0\3\7\2\5\1\41\2\5\1\42\4\5\1\43"+
    "\10\5\1\44\1\5\1\0\3\7\1\45\3\5\1\46"+
    "\13\5\1\47\1\0\3\7\1\50\2\5\1\51\1\5"+
    "\1\52\3\5\1\53\1\54\1\55\1\56\1\5\1\0"+
    "\3\7\2\5\1\57\1\60\1\61\1\62\1\5\1\63"+
    "\1\0\3\7\1\5\1\64\1\5\1\0\3\7\1\5"+
    "\1\65\1\0\3\7\1\66\3\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\1\22\1\0\1\22\1\0\4\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\267\0\364\0\u0131\0\267"+
    "\0\267\0\u016e\0\u01ab\0\267\0\u01e8\0\u0225\0\u0262\0\u029f"+
    "\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\267\0\u07a0\0\267\0\u07dd"+
    "\0\u081a\0\267\0\u0857\0\u0894\0\267\0\267\0\267\0\267"+
    "\0\267\0\u08d1\0\267\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\267\0\u0b33\0\267\0\267"+
    "\0\u0b70\0\267\0\267\0\267\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u016e\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u016e\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\267\0\267\0\267\0\u10eb"+
    "\0\u1128\0\267\0\u081a\0\u1165\0\u11a2\0\u11df\0\267\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u016e\0\u15af"+
    "\0\u15ec\0\u016e\0\u1629\0\u016e\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u11a2\0\u081a"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u016e\0\u1a36"+
    "\0\u1a73\0\u016e\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u016e\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u016e"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u016e\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u016e\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u016e\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u016e\0\u23be\0\u016e"+
    "\0\u23fb\0\u2438\0\u2475\0\u016e\0\u016e\0\u016e\0\u016e\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u016e\0\u016e"+
    "\0\u016e\0\u016e\0\u265d\0\u016e\0\u269a\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e\0\u016e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u016e\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u016e\0\267\0\u2a2d"+
    "\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd"+
    "\0\u2e3a\0\u2e77\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u3022";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\11\1\15\1\16\1\17"+
    "\1\20\1\21\11\22\1\23\1\24\1\25\6\12\1\4"+
    "\2\12\1\26\1\27\1\30\1\31\1\32\1\12\1\33"+
    "\1\12\1\34\1\12\1\35\1\12\1\36\1\37\1\40"+
    "\1\41\2\12\1\42\1\43\1\4\2\44\1\45\2\44"+
    "\1\46\2\44\1\47\34\44\1\50\27\44\2\51\1\52"+
    "\2\51\1\53\6\51\1\4\30\51\1\54\27\51\77\0"+
    "\1\5\127\0\1\55\37\0\1\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\25\12\1\0\1\12\13\0"+
    "\1\56\77\0\1\57\16\0\1\60\56\0\1\61\4\0"+
    "\1\62\10\0\1\63\57\0\1\64\1\0\12\65\56\0"+
    "\1\66\3\0\1\67\73\0\1\65\1\0\1\70\1\71"+
    "\2\72\4\73\2\74\4\0\1\75\1\76\1\77\1\100"+
    "\1\101\5\0\1\75\1\76\1\77\3\0\1\100\34\0"+
    "\1\65\1\0\12\22\4\0\1\75\1\76\1\77\1\100"+
    "\6\0\1\75\1\76\1\77\3\0\1\100\51\0\1\102"+
    "\74\0\1\103\74\0\1\104\37\0\1\12\11\0\1\12"+
    "\7\0\12\12\3\0\6\12\1\0\17\12\1\105\5\12"+
    "\1\0\2\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\1\12\1\106\13\12\1\107\7\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\5\12"+
    "\1\110\7\12\1\111\7\12\1\0\2\12\11\0\1\12"+
    "\7\0\12\12\3\0\6\12\1\0\12\12\1\112\12\12"+
    "\1\0\2\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\1\12\1\113\6\12\1\114\4\12\1\115\7\12"+
    "\1\0\2\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\6\12\1\116\4\12\1\117\1\120\3\12\1\121"+
    "\4\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\1\12\1\122\23\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\5\12\1\123"+
    "\14\12\1\124\2\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\17\12\1\125\2\12\1\126"+
    "\2\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\5\12\1\127\17\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\21\12\1\130"+
    "\2\12\1\131\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\10\12\1\132\6\12\1\133\5\12"+
    "\1\0\2\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\7\12\1\134\15\12\1\0\1\12\73\0\1\135"+
    "\1\0\2\44\1\0\2\44\1\0\2\44\1\0\34\44"+
    "\1\0\27\44\2\0\1\45\72\0\2\136\4\0\2\136"+
    "\1\137\3\136\1\137\5\136\4\140\4\141\13\136\1\137"+
    "\2\136\1\137\3\136\1\137\5\136\1\137\2\136\1\137"+
    "\1\136\1\137\4\136\15\0\1\142\62\0\1\52\72\0"+
    "\2\136\4\0\2\136\1\143\3\136\1\143\5\136\4\144"+
    "\4\145\13\136\1\143\2\136\1\143\3\136\1\143\5\136"+
    "\1\143\2\136\1\143\1\136\1\143\4\136\24\0\1\146"+
    "\71\0\1\147\76\0\12\65\4\0\1\75\1\76\1\77"+
    "\7\0\1\75\1\76\1\77\20\0\15\66\1\150\57\66"+
    "\2\67\1\5\2\67\1\6\67\67\20\0\1\65\1\0"+
    "\1\70\1\71\2\72\4\73\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\34\0\1\65\1\0\10\73\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\34\0\1\65\1\0\10\151\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\34\0\1\65\1\0\10\152\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\34\0\1\65\1\0\12\74\4\0\1\75\1\76\1\77"+
    "\7\0\1\75\1\76\1\77\36\0\2\153\2\0\12\154"+
    "\63\0\1\155\11\156\3\0\4\156\4\0\6\156\20\0"+
    "\1\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\5\12\1\157\17\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\14\12\1\160\3\12\1\161"+
    "\4\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\14\12\1\162\10\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\6\12\1\163"+
    "\16\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\20\12\1\164\4\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\12\12\1\165"+
    "\12\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\14\12\1\166\10\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\17\12\1\167"+
    "\5\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\16\12\1\170\6\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\3\12\1\171"+
    "\21\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\1\12\1\172\23\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\13\12\1\173"+
    "\11\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\24\12\1\174\1\0\2\12\11\0\1\12"+
    "\7\0\12\12\3\0\6\12\1\0\12\12\1\175\12\12"+
    "\1\0\2\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\10\12\1\176\4\12\1\177\7\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\2\12"+
    "\1\200\22\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\21\12\1\201\3\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\1\12"+
    "\1\202\23\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\10\12\1\203\14\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\13\12"+
    "\1\204\11\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\22\12\1\205\2\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\10\12"+
    "\1\206\14\12\1\0\1\12\22\0\10\141\65\0\10\137"+
    "\57\0\1\142\5\0\10\207\57\0\1\142\5\0\10\210"+
    "\71\0\1\211\46\0\15\66\1\150\3\66\1\5\53\66"+
    "\20\0\1\65\1\0\10\212\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\34\0\1\65\1\0\10\213\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\36\0\12\154\63\0\12\154\4\0\1\75\1\0\1\77"+
    "\7\0\1\75\1\0\1\77\42\0\1\155\11\156\3\0"+
    "\4\156\1\100\3\0\6\156\3\0\1\100\36\0\12\214"+
    "\3\0\4\214\1\100\3\0\6\214\3\0\1\100\14\0"+
    "\1\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\1\12\1\215\23\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\3\12\1\216\21\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\5\12\1\217\17\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\21\12\1\220\3\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\1\12\1\221\23\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\5\12\1\222\17\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\20\12\1\205\4\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\1\12\1\223\23\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\15\12\1\224\7\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\12\12\1\225\12\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\2\12\1\226\22\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\12\12\1\227\12\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\23\12\1\230\1\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\16\12\1\231\2\12\1\232"+
    "\3\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\12\12\1\233\12\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\22\12\1\234"+
    "\2\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\21\12\1\235\3\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\21\12\1\236"+
    "\3\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\5\12\1\237\17\12\1\0\2\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\5\12\1\240"+
    "\17\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\12\12\1\241\12\12\1\0\1\12\31\0"+
    "\1\242\63\0\1\65\1\0\10\243\2\74\4\0\1\75"+
    "\1\76\1\77\1\100\6\0\1\75\1\76\1\77\3\0"+
    "\1\100\34\0\1\65\1\0\10\244\2\74\4\0\1\75"+
    "\1\76\1\77\1\100\6\0\1\75\1\76\1\77\3\0"+
    "\1\100\36\0\12\245\3\0\4\245\1\100\3\0\6\245"+
    "\3\0\1\100\14\0\1\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\11\12\1\246\13\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\5\12"+
    "\1\247\17\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\10\12\1\250\14\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\22\12"+
    "\1\251\2\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\12\12\1\252\12\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\17\12"+
    "\1\253\5\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\22\12\1\254\2\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\4\12"+
    "\1\255\20\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\1\12\1\256\23\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\15\12"+
    "\1\257\7\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\5\12\1\260\17\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\10\12"+
    "\1\261\14\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\17\12\1\262\5\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\10\12"+
    "\1\263\14\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\3\12\1\264\21\12\1\0\2\12"+
    "\11\0\1\12\7\0\12\12\3\0\6\12\1\0\15\12"+
    "\1\265\7\12\1\0\2\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\5\12\1\266\17\12\1\0\1\12"+
    "\26\0\1\267\66\0\1\65\1\0\10\270\2\74\4\0"+
    "\1\75\1\76\1\77\1\100\6\0\1\75\1\76\1\77"+
    "\3\0\1\100\34\0\1\65\1\0\10\271\2\74\4\0"+
    "\1\75\1\76\1\77\1\100\6\0\1\75\1\76\1\77"+
    "\3\0\1\100\36\0\12\272\3\0\4\272\1\100\3\0"+
    "\6\272\3\0\1\100\14\0\1\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\12\12\1\273\12\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\14\12\1\274\10\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\12\12\1\275\12\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\21\12\1\276\3\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\4\12\1\277\20\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\1\12\1\300\23\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\21\12\1\301\3\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\20\12\1\302\4\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\3\12\1\303\21\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\3\12\1\304\21\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\14\12\1\305\10\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\3\12\1\306\21\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\7\12\1\307\15\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\22\12\1\310\2\12\1\0\1\12\32\0\1\311\62\0"+
    "\1\65\1\0\10\312\2\74\4\0\1\75\1\76\1\77"+
    "\1\100\6\0\1\75\1\76\1\77\3\0\1\100\34\0"+
    "\1\65\1\0\10\313\2\74\4\0\1\75\1\76\1\77"+
    "\1\100\6\0\1\75\1\76\1\77\3\0\1\100\36\0"+
    "\12\314\3\0\4\314\1\100\3\0\6\314\3\0\1\100"+
    "\14\0\1\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\1\315\24\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\22\12\1\316\2\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\21\12\1\317\3\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\5\12\1\320\17\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\5\12\1\321\17\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\5\12\1\322\17\12\1\0"+
    "\2\12\11\0\1\12\7\0\12\12\3\0\6\12\1\0"+
    "\21\12\1\323\3\12\1\0\2\12\11\0\1\12\7\0"+
    "\12\12\3\0\6\12\1\0\21\12\1\324\3\12\1\0"+
    "\1\12\25\0\1\325\67\0\1\65\1\0\10\326\2\74"+
    "\4\0\1\75\1\76\1\77\1\100\6\0\1\75\1\76"+
    "\1\77\3\0\1\100\34\0\1\65\1\0\10\327\2\74"+
    "\4\0\1\75\1\76\1\77\1\100\6\0\1\75\1\76"+
    "\1\77\3\0\1\100\36\0\12\330\3\0\4\330\1\100"+
    "\3\0\6\330\3\0\1\100\14\0\1\12\11\0\1\12"+
    "\7\0\12\12\3\0\6\12\1\0\1\12\1\331\23\12"+
    "\1\0\2\12\11\0\1\12\7\0\12\12\3\0\6\12"+
    "\1\0\5\12\1\332\17\12\1\0\2\12\11\0\1\12"+
    "\7\0\12\12\3\0\6\12\1\0\5\12\1\333\17\12"+
    "\1\0\1\12\30\0\1\334\64\0\1\65\1\0\10\335"+
    "\2\74\4\0\1\75\1\76\1\77\1\100\6\0\1\75"+
    "\1\76\1\77\3\0\1\100\34\0\1\65\1\0\10\336"+
    "\2\74\4\0\1\75\1\76\1\77\1\100\6\0\1\75"+
    "\1\76\1\77\3\0\1\100\36\0\12\337\3\0\4\337"+
    "\1\100\3\0\6\337\3\0\1\100\14\0\1\12\11\0"+
    "\1\12\7\0\12\12\3\0\6\12\1\0\12\12\1\340"+
    "\12\12\1\0\2\12\11\0\1\12\7\0\12\12\3\0"+
    "\6\12\1\0\4\12\1\341\20\12\1\0\1\12\26\0"+
    "\1\342\66\0\1\65\1\0\10\343\2\74\4\0\1\75"+
    "\1\76\1\77\1\100\6\0\1\75\1\76\1\77\3\0"+
    "\1\100\34\0\1\65\1\0\10\344\2\74\4\0\1\75"+
    "\1\76\1\77\1\100\6\0\1\75\1\76\1\77\3\0"+
    "\1\100\36\0\12\345\3\0\4\345\1\100\3\0\6\345"+
    "\3\0\1\100\14\0\1\12\11\0\1\12\7\0\12\12"+
    "\3\0\6\12\1\0\12\12\1\346\12\12\1\0\1\12"+
    "\32\0\1\347\62\0\1\65\1\0\10\350\2\74\4\0"+
    "\1\75\1\76\1\77\1\100\6\0\1\75\1\76\1\77"+
    "\3\0\1\100\34\0\1\65\1\0\10\351\2\74\4\0"+
    "\1\75\1\76\1\77\1\100\6\0\1\75\1\76\1\77"+
    "\3\0\1\100\36\0\12\352\3\0\4\352\1\100\3\0"+
    "\6\352\3\0\1\100\34\0\1\65\1\0\10\353\2\74"+
    "\4\0\1\75\1\76\1\77\1\100\6\0\1\75\1\76"+
    "\1\77\3\0\1\100\34\0\1\65\1\0\10\354\2\74"+
    "\4\0\1\75\1\76\1\77\1\100\6\0\1\75\1\76"+
    "\1\77\3\0\1\100\36\0\12\355\3\0\4\355\1\100"+
    "\3\0\6\355\3\0\1\100\34\0\1\65\1\0\10\356"+
    "\2\74\4\0\1\75\1\76\1\77\1\100\6\0\1\75"+
    "\1\76\1\77\3\0\1\100\34\0\1\65\1\0\10\357"+
    "\2\74\4\0\1\75\1\76\1\77\1\100\6\0\1\75"+
    "\1\76\1\77\3\0\1\100\36\0\12\360\3\0\4\360"+
    "\1\100\3\0\6\360\3\0\1\100\34\0\1\65\1\0"+
    "\10\361\2\74\4\0\1\75\1\76\1\77\1\100\6\0"+
    "\1\75\1\76\1\77\3\0\1\100\34\0\1\65\1\0"+
    "\10\362\2\74\4\0\1\75\1\76\1\77\1\100\6\0"+
    "\1\75\1\76\1\77\3\0\1\100\36\0\12\363\3\0"+
    "\4\363\1\100\3\0\6\363\3\0\1\100\34\0\1\65"+
    "\1\0\10\364\2\74\4\0\1\75\1\76\1\77\1\100"+
    "\6\0\1\75\1\76\1\77\3\0\1\100\34\0\1\65"+
    "\1\0\10\365\2\74\4\0\1\75\1\76\1\77\1\100"+
    "\6\0\1\75\1\76\1\77\3\0\1\100\36\0\12\366"+
    "\3\0\4\366\1\100\3\0\6\366\3\0\1\100\34\0"+
    "\1\65\1\0\10\367\2\74\4\0\1\75\1\76\1\77"+
    "\1\100\6\0\1\75\1\76\1\77\3\0\1\100\34\0"+
    "\1\65\1\0\10\370\2\74\4\0\1\75\1\76\1\77"+
    "\1\100\6\0\1\75\1\76\1\77\3\0\1\100\36\0"+
    "\12\371\3\0\4\371\1\100\3\0\6\371\3\0\1\100"+
    "\34\0\1\65\1\0\10\372\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\34\0\1\65\1\0\10\373\2\74\4\0\1\75\1\76"+
    "\1\77\1\100\6\0\1\75\1\76\1\77\3\0\1\100"+
    "\36\0\12\374\3\0\4\374\1\100\3\0\6\374\3\0"+
    "\1\100\34\0\1\65\1\0\10\375\2\74\4\0\1\75"+
    "\1\76\1\77\1\100\6\0\1\75\1\76\1\77\3\0"+
    "\1\100\36\0\12\376\3\0\4\376\1\100\3\0\6\376"+
    "\3\0\1\100\34\0\1\65\1\0\10\377\2\74\4\0"+
    "\1\75\1\76\1\77\1\100\6\0\1\75\1\76\1\77"+
    "\3\0\1\100\57\0\1\100\14\0\1\100\34\0\1\65"+
    "\1\0\10\u0100\2\74\4\0\1\75\1\76\1\77\1\100"+
    "\6\0\1\75\1\76\1\77\3\0\1\100\34\0\1\65"+
    "\1\0\10\u0101\2\74\4\0\1\75\1\76\1\77\1\100"+
    "\6\0\1\75\1\76\1\77\3\0\1\100\34\0\1\65"+
    "\1\0\10\u0102\2\74\4\0\1\75\1\76\1\77\1\100"+
    "\6\0\1\75\1\76\1\77\3\0\1\100\34\0\1\65"+
    "\1\0\12\74\4\0\1\75\1\76\1\77\1\100\6\0"+
    "\1\75\1\76\1\77\3\0\1\100\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12383];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\2\11\2\1\1\11\30\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\5\11\1\0\1\11"+
    "\1\0\1\1\1\0\6\1\1\11\1\0\2\11\1\0"+
    "\3\11\30\1\3\11\2\1\1\11\3\1\1\0\1\11"+
    "\1\0\2\1\1\0\33\1\3\0\30\1\1\0\24\1"+
    "\1\0\21\1\1\0\13\1\1\0\6\1\1\0\5\1"+
    "\1\0\4\1\1\11\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private String origin;

  private Mem mem;

  private Object yylval;
  private StringBuffer string = new StringBuffer();
  private Position sstart;

  private LinkedList<Token> commentTokens = new LinkedList<>();

  private LinkedList<Token> tokens = new LinkedList<>();

  private int charLiteral(String charval) {
    yylval = new ExpLiteral(charval, "char");
    tokens.add(new Token('\'' + charval, sstart, getEndPos()));
    return VondaGrammar.Lexer.OTHER_LITERAL;
  }

  private int intLiteral(String intval) {
    yylval = new ExpLiteral(intval, "int");
    return token(VondaGrammar.Lexer.INT);
  }

  private int longLiteral(String longval) {
    yylval = new ExpLiteral(longval, "long");
    return token(VondaGrammar.Lexer.OTHER_LITERAL);
  }

  private int floatLiteral(String floatval) {
    yylval = new ExpLiteral(floatval, "float");
    return token(VondaGrammar.Lexer.OTHER_LITERAL);
  }

  private int doubleLiteral(String doubleval) {
    yylval = new ExpLiteral(doubleval, "double");
    return token(VondaGrammar.Lexer.OTHER_LITERAL);
  }

  private int booleanLiteral(String boolval) {
    yylval = new ExpLiteral(boolval, "boolean");
    return token(VondaGrammar.Lexer.BOOL_LITERAL);
  }

  /**
   * Method to retrieve the beginning position of the last scanned token.
   * @return the position at which the last scanned token starts.
   */
  public Position getStartPos() {
    return new Position(yyline, yycolumn, yychar, origin);
  }

  /**
   * Method to retrieve the ending position of the last scanned token.
   * @return the first position beyond the last scanned token.
   */
  public Position getEndPos() {
    int len = yylength();
    return new Position(yyline, yycolumn + len, yychar + len, origin);
  }

  /**
   * Method to retrieve the semantic value of the last scanned token.
   * @return the semantic value of the last scanned token.
   */
  public Object getLVal() {
    Object result = yylval;
    yylval = null;
    return result;
  }

  /**
   * Entry point for the scanner.  Returns the token identifier corresponding
   * to the next token and prepares to return the semantic value
   * and beginning/ending positions of the token.
   *
   * This is a wrapper around the internal yylex method to collect tokens such
   * as comments, whitespace, etc. to use them later on in the compiler's
   * output. Also, other necessary functionality can be put her (extracting
   * the full input text?)
   *
   * @return the token identifier corresponding to the next token.
   */
  public int yylex() throws java.io.IOException {
    int result = yylex_internal();
    return result;
  }

  /**
   * Entry point for error reporting.  Emits an error
   * referring to the given location in a user-defined way.
   *
   * @param loc The location of the element to which the
   *                error message is related
   * @param msg The string for the error message.
   */
  public void yyerror (VondaGrammar.Location loc, String msg) {
    mem.registerError(msg, new Location(loc.begin, loc.end), PARSE_ERROR);
  }

  public void setOrigin(String s) { origin = s; }

  public void setMem(Mem m) { mem = m; }

  /** Return the collected tokens */
  public LinkedList<Token> getTokens() { return tokens; }

  /** Return the collected comment tokens */
  public LinkedList<Token> getCommentTokens() { return commentTokens; }

  /** Add a non-comment and non-whitespace token */
  public int token(int token) {
    tokens.add(new Token(yytext(), getStartPos(), getEndPos()));
    return token;
  }

  /** Add a comment or whitespace token */
  public void addComment(String comment) {
    commentTokens.add(new Token(comment, getStartPos(), getEndPos()));
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VondaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex_internal() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return VondaGrammar.Lexer.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          // fall through
          case 55: break;
          case 2:
            { addComment(yytext());
            }
          // fall through
          case 56: break;
          case 3:
            { return token((int)yycharat(0));
            }
          // fall through
          case 57: break;
          case 4:
            { sstart = getStartPos(); string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 58: break;
          case 5:
            { yylval = yytext();
  return token(VondaGrammar.Lexer.IDENTIFIER);
            }
          // fall through
          case 59: break;
          case 6:
            { sstart = getStartPos(); yybegin(CHARLITERAL);
            }
          // fall through
          case 60: break;
          case 7:
            { return intLiteral(yytext());
            }
          // fall through
          case 61: break;
          case 8:
            { string.append( yytext() );
            }
          // fall through
          case 62: break;
          case 9:
            { throw new RuntimeException("Unterminated string at end of line");
            }
          // fall through
          case 63: break;
          case 10:
            { yybegin(YYINITIAL);
  String s = string.toString();
  yylval = new ExpLiteral(s, "String");
  tokens.add(new Token('"' + s + '"', sstart, getEndPos()));
  return VondaGrammar.Lexer.STRING;
            }
          // fall through
          case 64: break;
          case 11:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          // fall through
          case 65: break;
          case 12:
            { return token(VondaGrammar.Lexer.NOTEQ);
            }
          // fall through
          case 66: break;
          case 13:
            { return token(VondaGrammar.Lexer.ANDAND);
            }
          // fall through
          case 67: break;
          case 14:
            { return token(VondaGrammar.Lexer.PLUSPLUS);
            }
          // fall through
          case 68: break;
          case 15:
            { return token(VondaGrammar.Lexer.PLUSEQ);
            }
          // fall through
          case 69: break;
          case 16:
            { return token(VondaGrammar.Lexer.MINUSMINUS);
            }
          // fall through
          case 70: break;
          case 17:
            { return token(VondaGrammar.Lexer.MINUSEQ);
            }
          // fall through
          case 71: break;
          case 18:
            { return doubleLiteral(yytext());
            }
          // fall through
          case 72: break;
          case 19:
            { return floatLiteral(yytext());
            }
          // fall through
          case 73: break;
          case 20:
            { return longLiteral(yytext());
            }
          // fall through
          case 74: break;
          case 21:
            { return token(VondaGrammar.Lexer.LTEQ);
            }
          // fall through
          case 75: break;
          case 22:
            { return token(VondaGrammar.Lexer.EQEQ);
            }
          // fall through
          case 76: break;
          case 23:
            { return token(VondaGrammar.Lexer.GTEQ);
            }
          // fall through
          case 77: break;
          case 24:
            { return token(VondaGrammar.Lexer.DO);
            }
          // fall through
          case 78: break;
          case 25:
            { return token(VondaGrammar.Lexer.IF);
            }
          // fall through
          case 79: break;
          case 26:
            { return token(VondaGrammar.Lexer.OROR);
            }
          // fall through
          case 80: break;
          case 27:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          // fall through
          case 81: break;
          case 28:
            { yybegin(YYINITIAL); return charLiteral('\'' + yytext());
            }
          // fall through
          case 82: break;
          case 29:
            { return token(VondaGrammar.Lexer.ELLIPSIS);
            }
          // fall through
          case 83: break;
          case 30:
            { return token(VondaGrammar.Lexer.FOR);
            }
          // fall through
          case 84: break;
          case 31:
            { return token(VondaGrammar.Lexer.ISA);
            }
          // fall through
          case 85: break;
          case 32:
            { return token(VondaGrammar.Lexer.NEW);
            }
          // fall through
          case 86: break;
          case 33:
            { return token(VondaGrammar.Lexer.CASE);
            }
          // fall through
          case 87: break;
          case 34:
            { return token(VondaGrammar.Lexer.ELSE);
            }
          // fall through
          case 88: break;
          case 35:
            { return token(VondaGrammar.Lexer.NULL);
            }
          // fall through
          case 89: break;
          case 36:
            { return booleanLiteral(yytext());
            }
          // fall through
          case 90: break;
          case 37:
            { return token(VondaGrammar.Lexer.BREAK);
            }
          // fall through
          case 91: break;
          case 38:
            { return token(VondaGrammar.Lexer.FINAL);
            }
          // fall through
          case 92: break;
          case 39:
            { return token(VondaGrammar.Lexer.WHILE);
            }
          // fall through
          case 93: break;
          case 40:
            { return token(VondaGrammar.Lexer.CANCEL);
            }
          // fall through
          case 94: break;
          case 41:
            { return token(VondaGrammar.Lexer.IMPORT);
            }
          // fall through
          case 95: break;
          case 42:
            { return token(VondaGrammar.Lexer.LAMBDA);
            }
          // fall through
          case 96: break;
          case 43:
            { return token(VondaGrammar.Lexer.PUBLIC);
            }
          // fall through
          case 97: break;
          case 44:
            { return token(VondaGrammar.Lexer.RETURN);
            }
          // fall through
          case 98: break;
          case 45:
            { return token(VondaGrammar.Lexer.STATIC);
            }
          // fall through
          case 99: break;
          case 46:
            { return token(VondaGrammar.Lexer.SWITCH);
            }
          // fall through
          case 100: break;
          case 47:
            { return token(VondaGrammar.Lexer.DEFAULT);
            }
          // fall through
          case 101: break;
          case 48:
            { return token(VondaGrammar.Lexer.INCLUDE);
            }
          // fall through
          case 102: break;
          case 49:
            { return token(VondaGrammar.Lexer.PRIVATE);
            }
          // fall through
          case 103: break;
          case 50:
            { return token(VondaGrammar.Lexer.PROPOSE);
            }
          // fall through
          case 104: break;
          case 51:
            { return token(VondaGrammar.Lexer.TIMEOUT);
            }
          // fall through
          case 105: break;
          case 52:
            { return token(VondaGrammar.Lexer.CONTINUE);
            }
          // fall through
          case 106: break;
          case 53:
            { return token(VondaGrammar.Lexer.PROTECTED);
            }
          // fall through
          case 107: break;
          case 54:
            { return token(VondaGrammar.Lexer.CANCEL_ALL);
            }
          // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
