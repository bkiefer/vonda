//\small\begin{lstlisting}
import java.nio.file.*;
import static java.nio.file.Files.*;
import java.io.File;
/*@
// A "Java" comment, everything in this comment will be transferred literally
// to the compiled file, without the comment brackets.
public static int MY_MAX_INT = 100;
@*/

// declare a Java method
#Object boolean equals(Object);

boolean funcWithJava(String h) {
  boolean ex = false;
  // inject plain java
  /*@
  // NOW IT WORKS CORRECTLY
  ex = Files.exists(new File(h).toPath());
  */
  return ex;
}

// Define a variable of an RDF type
Child child = new Child;

// **********************************************************************
// Tests and Comparisons
// **********************************************************************

// test for value under path, intermediate tests are generated
if (child.hasFather.surname) System.out.println("foo");

// subsumption of dialogue acts, (equality is also possible)
if (lastDA() <= #AcceptOffer(Bringing)) System.out.println("foo");

Child c1 = new Child;
Agent c2 = new Child;
// Test if two RDF objects are the same object.
// Mark the difference to the followin example! Here, the objects are compared,
// (same for !=), but all other comparison operators compare the classes!
if (c1 == c2) System.out.println("foo");

// Is the class of c1 a subclass, resp. a strict subclass of the class of c2 ?
if (c1 <= c2) System.out.println("foo");
if (c1 < c2) System.out.println("foo");

// Is the class of c1 a subclass of the class 'Child'?
if (c1 <= Child) System.out.println("foo");

// Set the child's name, then clear it again
c1.forename = "new name";
c1.forename = null;

String propname = "<dom:forename>";
String cname = isa(String, c1.{propname});

// Is s not null and not empty?
String s = "bar";
if (s) System.out.println("foo");

// Is s.compareTo(t) < 0
s = "bar"; t = "baz";
if (s < t) System.out.println("foo");

// Is i not null and not zero? (Same for all other Number containers)
Integer i = -1;
if (i) System.out.println("foo");

// Is o not null?
Object o = new Object();
if (o) System.out.println("foo");

// **********************************************************************
// Forward declaration of methods
// **********************************************************************

// This is the forward declaration
String foo(String a, String b);

// A rule using foo
a_rule:
if (foo("a", "b")) {
  // this java code should appear in the body of the rule
  /*@ String[] lbls = { "a", "b" }; @*/
  System.out.println("yes!");
}

// Function foo defined here
String foo (String a, String b) { return a + b; }

// **********************************************************************
// Breaking out of rules
// **********************************************************************

// break can be used to exit the rule specified, rules following this
// rule will still be executed
test_rule:
  if (true) {
    second_rule:
      if (false) {
        break test_rule;
      }
  }

// return from a file (not looking at subsequent rules) with cancel
test_rule2:
  if (true) {
    second_rule:
      if (false) {
        cancel;
      }
  }

// Stop all rule execution (even at higher levels) with cancel_all
test_rule3:
  if (true) {
    second_rule:
      if (false) {
        cancel_all;
      }
  } else {
    System.out.println("what?");
  }

// **********************************************************************
// Near-to-Java features
// **********************************************************************

// you can declare a variable final if you need to use it in a propose or
// timeout block
test_rule4:
  if(true) {
    final c = "hi";
    final boolean b = false;
    propose("test") {
      if(c.equals("bye"))
        System.out.println("bye");
    }
  }

// **********************************************************************
// Coverage - To be revised and sorted properly
// **********************************************************************

// there can always be an 'else' case
if (true && !false) { /* do something */ } else { /* do something else */ }

// TODO: sum1 and sum2 should, but do not become a proper declaration here
// An unknown function is used. The system tries to infer the type of
// operator arguments as best as possible
somevar = getSomething();
sum1 = 3 + somevar;
sum2 = somevar + 3;
anothervar = getSomething();
someint = 1 < 3 ? anothervar : 3;

// You can use casts and conditional expressions just like in Java
Integer anotherint = isa(Integer, i);
anotherint = anotherint < 3 ? anotherint : 3;

// There are also while and for loops and switch-case blocks available
while (anotherint > 7000) { continue; }
for (abc = 1; abc < 10; abc++) { ++abc; }

ArrayList<String> iterlist = { "a", "b" };
// The following two lines are equivalent, the type of a is inferred
for (String a : iterlist) {}
for (a : iterlist) {}

String str = "a";
switch (str) {
  case "a": break;
  case "b":
  default:
}

// It is possible to perform implicit casts on iterable elements in a for
// loop; there is, however, no type safety promise from our side!
ArrayList<Object> iterlist2 = { 1, 2 };
for (Integer a : iterlist2) {}

// These are some examples for lambda expressions
List<String> newlist = {"a", "cd", "ab", "b"};
allas = filter(newlist, lambda(element) element.contains("a"));
dosort = sort(newlist, lambda(a, b) a.length() - b.length());

// Creation of dialogue acts. Elements that are Variables need to be
// enclosed in {}, all others will be converted to Strings (symbols are default)
robotname = "Robert";
dia = #Inform(Liking, agent=username, patient={robotname});

void callToSomeMethod() {
  // a stub for an external function
}

// You can set labelled timeouts that will execute the code given to them
// once the time (given in milliseconds) is over
timeout("do_something", 15000) {
  callToSomeMethod();
}

// You can also condition a timeout on the finishing of a behaviour. The code
// block will be executed when either the specified time runs out or the
// behaviour finishes
timeout(#Inform(Call, when=soon), 15000) {
  callToSomeMethod();
}

// shortcut notation for adding to and removing from collections
Set set = { 1, 2, 3 };
set += 4;
set -= 1;

// work for numbers the usual way
i = 9;
i += 1;
i -= 1;

// Automatic conversion to string of POD types
s = "number" + 10;
s = 10.0 + "number";
// and of RDF (returns URI)
s = "nameOf_" + child;
// Also in assignments
String number = 10;
// And dialogue acts
DialogueAct da1 = #Confirm(Correct, number={10});

// you can call any function on the top level
t = "10";
i = toInt(t);

DialogueAct da = #Inform(Posessing);
// **********************************************************************
// Access to Dialogue Acts
// **********************************************************************
if (! da.theme) {
  // set the value of any argument
  da.theme = "Ball";
}
// does the DialogueAct has any arguments?
if (da.getValues()) {
  s = da.getValues().get(0);
}

dont_like_foot:
if (da.theme == "Football") {
  da.theme = "Basketball";
  final dialogueAct = "Inform";
  propose("new_liking"){
    emitDA(#{dialogueAct}(Liking, theme={da.theme}));
  }
}

System.out.println(da.theme);
da.setDialogueActType("Confirm");
da.setProposition("Acquiring");
//System.out.println(da);

// creation of Java objects works as usual, java.util.* is imported by default
List<String> li = new ArrayList(2);

// include a set of rules, can be put in a subdirectory
include sub.Sub;

Quiz p;
if (p.hasHistory) {
  h = filter(p.hasHistory, lambda(c) c.turnId == 1);
  if (h) {
    x = h.get(0);
  }
}

Map<String, String> m = new HashMap();
if (m.containsKey("foo")) {
  s = m.get("foo");
}

if (! m.containsKey("bar")) {
  s = m.put("bar", "foo");
}

if (p.hasHistory) {
  // Check redefinition of local variables in lambda and for
  z = filter(p.hasHistory, lambda(h) h <= QuizHistory);
  z1 = filter(p.hasHistory, lambda(h) isa(QuizHistory, h) <= QuizHistory);
  z2 = filter(p.hasHistory, lambda(QuizHistory h) h <= QuizHistory);
  z3 = filter(p.hasHistory, lambda(h) h <= QuizHistory);
}

for (int h = 0; h < 3; ++h) { System.out.println(Integer.toString(h)); }

int func(String h) {
  h = "foo";
  return h.length();
}

{
  int h = 1;
  ++h;
}

// pre- and post-increment and decrement work for all functional properties
// with numerical range;

child.weight = 12.0;

++child.weight;
d = child.weight++;
d = --child.weight;
child.weight--;

// Testing the break functionality: names defined in WrapperClass
// Names = {"Frank", "Otto", "John", "Bill"};
if (names) {
  child.forename = names.get(0);
  newData();
  names.remove(0);
} else {
  isRunning = false;
  System.exit(0);
}

List<String> result;
if (! result) {
  result = {};
}

include sub.Breaks;

result += "SEP";

logger.error("result = {}", result);

// and this is it!

//\end{lstlisting}
